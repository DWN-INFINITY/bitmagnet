// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package model

import (
	"database/sql/driver"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"strings"
)

const (
	Video3dV3D    Video3d = "V3D"
	Video3dV3DSBS Video3d = "V3DSBS"
	Video3dV3DOU  Video3d = "V3DOU"
)

var ErrInvalidVideo3d = fmt.Errorf("not a valid Video3d, try [%s]", strings.Join(_Video3dNames, ", "))

var _Video3dNames = []string{
	string(Video3dV3D),
	string(Video3dV3DSBS),
	string(Video3dV3DOU),
}

// Video3dNames returns a list of possible string values of Video3d.
func Video3dNames() []string {
	tmp := make([]string, len(_Video3dNames))
	copy(tmp, _Video3dNames)
	return tmp
}

// Video3dValues returns a list of the values for Video3d
func Video3dValues() []Video3d {
	return []Video3d{
		Video3dV3D,
		Video3dV3DSBS,
		Video3dV3DOU,
	}
}

// String implements the Stringer interface.
func (x Video3d) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Video3d) IsValid() bool {
	_, err := ParseVideo3d(string(x))
	return err == nil
}

var _Video3dValue = map[string]Video3d{
	"V3D":    Video3dV3D,
	"v3d":    Video3dV3D,
	"V3DSBS": Video3dV3DSBS,
	"v3dsbs": Video3dV3DSBS,
	"V3DOU":  Video3dV3DOU,
	"v3dou":  Video3dV3DOU,
}

// ParseVideo3d attempts to convert a string to a Video3d.
func ParseVideo3d(name string) (Video3d, error) {
	if x, ok := _Video3dValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _Video3dValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Video3d(""), fmt.Errorf("%s is %w", name, ErrInvalidVideo3d)
}

// MarshalText implements the text marshaller method.
func (x Video3d) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Video3d) UnmarshalText(text []byte) error {
	tmp, err := ParseVideo3d(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var errVideo3dNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Video3d) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Video3d("")
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case string:
		*x, err = ParseVideo3d(v)
	case []byte:
		*x, err = ParseVideo3d(string(v))
	case Video3d:
		*x = v
	case *Video3d:
		if v == nil {
			return errVideo3dNilPtr
		}
		*x = *v
	case *string:
		if v == nil {
			return errVideo3dNilPtr
		}
		*x, err = ParseVideo3d(*v)
	default:
		return errors.New("invalid type for Video3d")
	}

	return
}

// Value implements the driver Valuer interface.
func (x Video3d) Value() (driver.Value, error) {
	return x.String(), nil
}

type NullVideo3d struct {
	Video3d Video3d
	Valid   bool
	Set     bool
}

func NewNullVideo3d(val interface{}) (x NullVideo3d) {
	err := x.Scan(val) // yes, we ignore this error, it will just be an invalid value.
	_ = err            // make any errcheck linters happy
	return
}

// Scan implements the Scanner interface.
func (x *NullVideo3d) Scan(value interface{}) (err error) {
	if value == nil {
		x.Video3d, x.Valid = Video3d(""), false
		return
	}

	err = x.Video3d.Scan(value)
	x.Valid = (err == nil)
	return
}

// Value implements the driver Valuer interface.
func (x NullVideo3d) Value() (driver.Value, error) {
	if !x.Valid {
		return nil, nil
	}
	return x.Video3d.String(), nil
}

// MarshalJSON correctly serializes a NullVideo3d to JSON.
func (n NullVideo3d) MarshalJSON() ([]byte, error) {
	const nullStr = "null"
	if n.Valid {
		return json.Marshal(n.Video3d)
	}
	return []byte(nullStr), nil
}

// UnmarshalJSON correctly deserializes a NullVideo3d from JSON.
func (n *NullVideo3d) UnmarshalJSON(b []byte) error {
	n.Set = true
	var x interface{}
	err := json.Unmarshal(b, &x)
	if err != nil {
		return err
	}
	err = n.Scan(x)
	return err
}

// MarshalGQL correctly serializes a NullVideo3d to GraphQL.
func (n NullVideo3d) MarshalGQL(w io.Writer) {
	bytes, err := json.Marshal(n)
	if err == nil {
		_, _ = w.Write(bytes)
	}
}

// UnmarshalGQL correctly deserializes a NullVideo3d from GraphQL.
func (n *NullVideo3d) UnmarshalGQL(v any) error {
	if v == nil {
		return nil
	}
	str, ok := v.(string)
	if !ok {
		return errors.New("value is not a string")
	}
	return n.UnmarshalJSON([]byte(str))
}
